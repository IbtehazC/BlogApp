{"version":3,"sources":["app/models/activity.ts","app/models/profile.ts","app/models/paginaton.ts","app/api/agent.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layouts/NavBar.tsx","features/activities/dashboard/ActivityFilter.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivtyListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layouts/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/forms/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivtyDetailedInfo.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWIdgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layouts/PrivateRoute.tsx","app/layouts/App.tsx","reportWebVitals.ts","app/layouts/ScrollToTop.tsx","index.tsx"],"names":["Activity","init","Object","assign","this","ActivtiyFormValues","activity","id","undefined","title","category","descripion","date","city","venue","Profile","user","username","userName","displayName","image","PaginatedResult","data","pagination","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","create","update","attend","Account","current","login","register","Profiles","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","console","log","loadActivity","getActivity","runInAction","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttedeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","setDisplayName","activityStore","followingCount","loadFollowings","loadUserActivities","UserStore","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","name","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnetion","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","basic","e","preventDefault","handleFollow","Card","Description","str","length","substring","truncate","bio","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Segment","Group","Label","textAlign","marginBottom","secondary","clearing","floated","groupActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","ActivityFilter","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","marginBottm","isLoggedIn","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","relaxed","divided","verticalAlign","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","setEditMode","isCurrentUser","Tab","Pane","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objecFit","Meta","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropZone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","Statistic","Divider","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.0e193809.chunk.js","sourcesContent":["import { Profile } from './profile';\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    descripion: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername?: string;\r\n    isCancelled?: boolean;\r\n    isGoing? : boolean;\r\n    isHost?: boolean;\r\n    host?: Profile;\r\n    attendees?: Profile[];\r\n}\r\n\r\nexport class Activity implements Activity {\r\n    constructor(init?: ActivtiyFormValues) {\r\n        Object.assign(this, init);\r\n    }\r\n}\r\n\r\nexport class ActivtiyFormValues {\r\n    id?: string = undefined;\r\n    title: string = \"\";\r\n    category: string = \"\";\r\n    descripion: string = \"\";\r\n    date: Date | null = null;\r\n    city: string = \"\";\r\n    venue: string = \"\";\r\n\r\n    constructor(activity?: Activity) {\r\n        if(activity) {\r\n            this.id = activity.id;\r\n            this.title = activity.title;\r\n            this.category = activity.category;\r\n            this.descripion = activity.descripion;\r\n            this.date = activity.date;\r\n            this.venue = activity.venue;\r\n            this.city = activity.city;\r\n        }\r\n    }\r\n}","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean;\r\n    photos?: Photo[];\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.username = user.userName;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }   \r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}","export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import { Profile, Photo, UserActivity } from './../models/profile';\r\nimport { Activity, ActivtiyFormValues } from './../models/activity';\r\nimport axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../..';\r\nimport { store } from '../stores/store';\r\nimport { User, UserFormValues } from '../models/user';\r\nimport { PaginatedResult } from '../models/paginaton';\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay)\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers.Authorization = `Bearer ${token}`;\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {\r\n    if (process.env.NODE_ENV === 'development') await sleep(1000);\r\n    const pagination = response.headers['pagination'];\r\n    if (pagination) {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>;\r\n    }\r\n    return response;\r\n}, (error: AxiosError) => {\r\n    const { data, status, config } = error.response!;\r\n    switch (status) {\r\n        case 400:\r\n            if (typeof data === \"string\") {\r\n                toast.error(data);\r\n            }\r\n            if (config.method === 'get' && data.errors.hasOwnProperty(\"id\")) {\r\n                history.push(\"/not-found\");\r\n            }\r\n            if (data.errors) {\r\n                const modalStateErrors = [];\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]) {\r\n                        modalStateErrors.push(data.errors[key]);\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            }\r\n            break;\r\n        case 401:\r\n            toast.error(\"UNAUTHORIZED\");\r\n            break;\r\n        case 404:\r\n            history.push(\"/not-found\");\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push(\"/server-error\");\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n})\r\n\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    del: <T>(url: string) => axios.delete<T>(url).then(responseBody),\r\n}\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', { params }).then(responseBody),\r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivtiyFormValues) => requests.post<void>('/activities', activity),\r\n    update: (activity: ActivtiyFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\r\n}\r\n\r\nconst Account = {\r\n    current: () => requests.get<User>('/account'),\r\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user)\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photos', formData, {\r\n            headers: { 'Content-type': 'multipart/form-data' }\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\r\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`, profile),\r\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\r\n    listFollowings: (username: string, predicate: string) => requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    listActivities: (username: string, predicate: string) => requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\nexport default agent;","import { ActivtiyFormValues, Activity } from './../models/activity';\r\nimport { Profile } from './../models/profile';\r\nimport { format } from \"date-fns\";\r\nimport { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { store } from \"./store\";\r\nimport { Pagination, PagingParams } from '../models/paginaton';\r\n\r\nexport default class ActivityStore {\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n        )\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        \r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if(key !== 'startDate') this.predicate.delete(key);\r\n            });\r\n        }\r\n        \r\n        switch (predicate) {\r\n            case 'all':\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n        }\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString());\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        })\r\n        return params;\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort((a, b) =>\r\n            a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    get groupActivities() {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                const date = format(activity.date!, \"dd MMM yyyy\");\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            }, {} as { [key: string]: Activity[] })\r\n        )\r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n            result.data.forEach(activity => {\r\n                this.setActivity(activity);\r\n            })\r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if (activity) {\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return activity;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const user = store.userStore.user;\r\n        if (user) {\r\n            activity.isGoing = activity.attendees!.some(\r\n                a => a.username === user.userName\r\n            );\r\n            activity.isHost = activity.hostUsername === user.userName;\r\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\r\n        }\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    createActivity = async (activity: ActivtiyFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUsername = user!.userName;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateActivity = async (activity: ActivtiyFormValues) => {\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                if (activity.id) {\r\n                    let updatedActivity = { ...this.getActivity(activity.id), ...activity };\r\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\r\n                    this.selectedActivity = updatedActivity as Activity;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            });\r\n        }\r\n    }\r\n\r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if (this.selectedActivity?.isGoing) {\r\n                    this.selectedActivity.attendees = this.selectedActivity.attendees?.filter(a => a.username !== user?.userName);\r\n                    this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    cancelActivityToggle = async () => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n\r\n    updateAttedeeFollowing = (username: string) => {\r\n        this.activityRegistry.forEach(activity => {\r\n            activity.attendees?.forEach(attendee => {\r\n                if (attendee.username === username) {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n}\r\n","import { store } from './store';\r\nimport { makeAutoObservable, runInAction, reaction } from 'mobx';\r\nimport agent from '../api/agent';\r\nimport { Profile, Photo, UserActivity } from './../models/profile';\r\n\r\nexport default class ProfileStore {\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    loadingFollowings = false;\r\n    activeTab = 0;\r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.activeTab,\r\n            activeTab => {\r\n                if(activeTab === 3 || activeTab === 4) {\r\n                    const predicate = activeTab === 3 ? \"followers\" : \"following\";\r\n                    this.loadFollowings(predicate);\r\n                } else {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile) {\r\n            return store.userStore.user.userName === this.profile.username;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingProfile = false);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos?.push(photo);\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n                this.uploading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.uploading = false);\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loading = false);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                if(this.profile) {\r\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loading = false);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateProfile = async (profile: Partial<Profile>) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateProfile(profile);\r\n            runInAction(() => {\r\n                if (profile.displayName && profile.displayName !== store.userStore.user?.displayName) {\r\n                    store.userStore.setDisplayName(profile.displayName);\r\n                }\r\n                this.profile = {...this.profile, ...profile as Profile};\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttedeeFollowing(username);\r\n            runInAction(() => {\r\n                if(this.profile && this.profile.username !== store.userStore.user?.userName && this.profile.username === username) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                if(this.profile && this.profile.username === store.userStore.user?.userName) {\r\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\r\n                }\r\n                this.followings.forEach(profile => {\r\n                    if(profile.username === username) {\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                })\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowings = true;\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n            runInAction(() => this.loadingFollowings = false);\r\n        }\r\n    }\r\n\r\n    loadUserActivities = async (username: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n        try {\r\n            const activities = await agent.Profiles.listActivities(username, predicate!);\r\n            runInAction(() => {\r\n                this.userActivities = activities;\r\n                this.loadingActivities = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loadingActivities = false;\r\n            })\r\n        }\r\n    } \r\n}","import { store } from './store';\r\nimport { makeAutoObservable, runInAction } from 'mobx';\r\nimport { User, UserFormValues } from '../models/user';\r\nimport agent from '../api/agent';\r\nimport { history } from '../..'; \r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            runInAction(() => this.user = user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setDisplayName = (name: string) => {\r\n        if (this.user) this.user.displayName = name;\r\n    }\r\n\r\n    setImage = (image: string) => {\r\n        if(this.user) this.user.image = image;\r\n    }\r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore\r\n    profileStore: ProfileStore\r\n    commentStore: CommentStore\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}\r\n","import { makeAutoObservable, reaction } from 'mobx';\r\nimport { ServerError } from './../models/serverError';\r\n\r\nexport default class CommonStore {\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if(token) {\r\n                    window.localStorage.setItem('jwt', token);\r\n                } else {\r\n                    window.localStorage.removeItem('jwt');\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { makeAutoObservable } from 'mobx';\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { store } from './store';\r\nimport { HubConnection, HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\r\nimport { makeAutoObservable, runInAction } from 'mobx';\r\nimport { ChatComment } from './../models/comment';\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnetion = (activityId: string) => {\r\n        if(store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n            \r\n            this.hubConnection.start().catch(error => console.log('Error establishing the Connection', error));\r\n\r\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment => {\r\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\r\n                    })\r\n                    this.comments = comments\r\n                });\r\n            });\r\n\r\n            this.hubConnection.on(\"ReceiveComment\", (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment)\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log(\"Error stopping conectionn: \", error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try {\r\n            console.log(values);\r\n            await this.hubConnection?.invoke(\"SendComment\", values);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Button, Container, Dropdown, Image, Menu } from 'semantic-ui-react';\r\nimport { useStore } from '../stores/store';\r\n\r\nexport default observer(function NavBar() {\r\n    const { userStore: { user, logout } } = useStore();\r\n\r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} to=\"/\" exact header>\r\n                    <img src=\"/assets/Images/logo.png\" alt=\"logo\" style={{ marginRight: '10px' }} />\r\n                    Reactivities\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to=\"/activities\" name=\"Activities\" />\r\n                <Menu.Item as={NavLink} to=\"/errors/\" name=\"Errors\" />\r\n                <Menu.Item>\r\n                    <Button as={NavLink} to=\"/createActivity\" positive content=\"Create Activity\" />\r\n                </Menu.Item>\r\n                <Menu.Item position=\"right\" >\r\n                    <Image src={user?.image || 'assets/Images/user.png'} avatar spaced=\"right\" />\r\n                    <Dropdown pointing=\"top left\" text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.userName}`} text=\"My Profile\" icon=\"user\" />\r\n                            <Dropdown.Item onClick={logout} text=\"Logout\" icon=\"power\" />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    )\r\n})","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport Calendar from 'react-calendar'\r\nimport { Header, Menu } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store'\r\n\r\nexport default observer(function ActivityFilters() {\r\n    const {activityStore: {predicate, setPredicate}} = useStore();\r\n    \r\n    return (\r\n        <>\r\n            <Menu vertical size=\"large\" style={{ width: '100%', marginTop: 28 }}>\r\n                <Header icon=\"filter\" attached color=\"teal\" content=\"Filters\" />\r\n                <Menu.Item \r\n                    content=\"All Activities\" \r\n                    active={predicate.has('all')}\r\n                    onClick={() => setPredicate('all', 'true')}\r\n                />\r\n                <Menu.Item \r\n                    content=\"I'm going\" \r\n                    active={predicate.has('isGoing')}\r\n                    onClick={() => setPredicate('isGoing', 'true')}\r\n                />\r\n                <Menu.Item \r\n                    content=\"I'm hosting\" \r\n                    active={predicate.has('isHost')}\r\n                    onClick={() => setPredicate('isHost', 'true')}    \r\n                />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar \r\n                onChange={(date) => setPredicate('startDate', date as Date)}\r\n                value={predicate.get('startDate') || new Date()}\r\n            />\r\n        </>\r\n\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent } from 'react'\r\nimport { Reveal, Button } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\n\r\nexport default observer(function FollowButton({ profile }: Props) {\r\n    const {profileStore, userStore} = useStore();\r\n    const {updateFollowing, loading} = profileStore;\r\n\r\n    if(userStore.user?.userName === profile.username) return null;\r\n\r\n    function handleFollow(e: SyntheticEvent, username: string) {\r\n        e.preventDefault();\r\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\r\n    }\r\n\r\n    return (\r\n        <Reveal animated=\"move\">\r\n            <Reveal.Content visible style={{ width: \"100%\" }}>\r\n                <Button \r\n                    fluid \r\n                    color=\"teal\" \r\n                    content={profile.following ? \"Following\" : \"Not Following\"}\r\n                />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{ width: \"100%\" }}>\r\n                <Button fluid basic\r\n                    color={profile.following ? \"red\" : \"green\"}\r\n                    content={profile.following ? \"Unfollow\" : \"Follow\"}\r\n                    loading={loading}\r\n                    onClick={(e) => handleFollow(e, profile.username)}\r\n                />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    )\r\n})","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Card, Icon, Image } from 'semantic-ui-react'\r\nimport { Profile } from '../../app/models/profile'\r\nimport FollowButton from './FollowButton'\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileCard({profile}: Props) {\r\n\r\n    function truncate(str: string | undefined) {\r\n        if (str) {\r\n            return str.length > 40 ? str.substring(0, 37) + '...' : str;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`} >\r\n            <Image src={profile.image || '/assets/Images/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name=\"user\" />\r\n                {profile.followersCount} Followers\r\n            </Card.Content>\r\n            <FollowButton profile={profile} />\r\n        </Card>\r\n    )\r\n})","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Image, List, Popup } from 'semantic-ui-react'\r\nimport { Profile } from '../../../app/models/profile'\r\nimport ProfileCard from '../../profiles/ProfileCard'\r\n\r\ninterface Props {\r\n    attendees: Profile[];\r\n}\r\n\r\nexport default observer(function ActivityListItemAttendee({ attendees }: Props) {\r\n\r\n    const styles = {\r\n        borderColor: 'orange',\r\n        borderWidth: 3\r\n    }\r\n\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <Popup\r\n                    hoverable\r\n                    key={attendee.username}\r\n                    trigger={\r\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\r\n                            <Image \r\n                                size=\"mini\" \r\n                                circular src={attendee.image || \"/assets/Images/user.png\"} \r\n                                bordered\r\n                                style={attendee.following ? styles : null}\r\n                            />\r\n                        </List.Item>\r\n                    }\r\n                >\r\n                    <ProfileCard profile={attendee} />\r\n                </Popup>\r\n\r\n            ))}\r\n        </List>\r\n    )\r\n})","import { format } from 'date-fns'\r\nimport React, { } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Item, Button, Segment, Icon, Label } from 'semantic-ui-react'\r\nimport { Activity } from '../../../app/models/activity'\r\nimport ActivityListItemAttendee from './ActivityListItemAttendee'\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nexport default function ActivityListItem({ activity }: Props) {\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled &&\r\n                    <Label attached=\"top\" color=\"red\" content=\"Cancelled\" style={{textAlign: \"center\"}} />\r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image style={{marginBottom: 3}} size=\"tiny\" circular src={activity.host?.image || \"/assets/Images/user.png\"} />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>\r\n                                Hosted By <Link to={`/profiles/${activity.hostUsername}`}>{activity.host?.displayName}</Link>\r\n                            </Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color=\"orange\">\r\n                                        You are hosting this Activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                            {activity.isGoing && !activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color=\"green\">\r\n                                        You are going to this Activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name=\"clock\" /> {format(activity.date!, \"dd MMM yyyy h:mm aa\")}\r\n                    <Icon name=\"marker\" /> {activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.descripion}</span>\r\n                <Button\r\n                    as={Link}\r\n                    to={`/activities/${activity.id}`}\r\n                    color=\"teal\"\r\n                    floated=\"right\"\r\n                    content=\"View\"\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React, { Fragment } from 'react'\r\nimport { Header } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityListItem from './ActivityListItem';\r\n\r\nexport default observer(function ActivityList() {\r\n    const { activityStore } = useStore();\r\n    const { groupActivities } = activityStore;\r\n\r\n    return (\r\n        <>\r\n            {groupActivities.map(([group, activities]) => (\r\n                <Fragment key={group}>\r\n                    <Header sub color=\"teal\">\r\n                        {group}\r\n                    </Header>\r\n                    {activities.map(activity => (\r\n                        <ActivityListItem key={activity.id} activity={activity} />\r\n                    ))}\r\n                </Fragment>\r\n            ))}\r\n        </>\r\n    )\r\n})","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import { observer } from 'mobx-react-lite'\r\nimport { useEffect, useState } from 'react'\r\nimport InfiniteScroll from 'react-infinite-scroller'\r\nimport { Grid, Loader } from 'semantic-ui-react'\r\nimport LoadingComponent from '../../../app/layouts/LoadingComponent'\r\nimport { PagingParams } from '../../../app/models/paginaton'\r\nimport { useStore } from '../../../app/stores/store'\r\nimport ActivityFilters from './ActivityFilter'\r\nimport ActivityList from './ActivityList'\r\nimport ActivityListItemPlaceholder from './ActivtyListItemPlaceholder'\r\n\r\nexport default observer(function ActivityDashboard() {\r\n    const { activityStore } = useStore();\r\n    const { loadActivities, activityRegistry, setPagingParams, pagination } = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1));\r\n        loadActivities().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (activityRegistry.size <= 1) loadActivities();\r\n    }, [activityRegistry.size, loadActivities])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width=\"10\">\r\n                {\r\n                    activityStore.loadingInitial && !loadingNext ? (\r\n                        <>\r\n                            <ActivityListItemPlaceholder />\r\n                            <ActivityListItemPlaceholder />\r\n                        </>\r\n                    ) : (\r\n                        <InfiniteScroll\r\n                            pageStart={0}\r\n                            loadMore={handleGetNext}\r\n                            hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                            initialLoad={false}\r\n                        >\r\n                            <ActivityList />\r\n                        </InfiniteScroll>\r\n                    )\r\n                }\r\n            </Grid.Column>\r\n            <Grid.Column width=\"6\">\r\n                <ActivityFilters />\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { useField } from 'formik'\r\nimport React from 'react'\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    type?: string;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextInput(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color=\"red\">{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from 'formik'\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Button, Header, Label } from 'semantic-ui-react'\r\nimport MyTextInput from '../../app/common/form/MyTextInput'\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer(function LoginForm() {\r\n    const {userStore} = useStore();\r\n\r\n    return(\r\n        <Formik\r\n            initialValues={{email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.login(values)\r\n            .catch(error => setErrors({error: \"Ivalid email or password\"}))}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors}) => (\r\n                <Form className=\"ui form\" onSubmit={handleSubmit} autoComplete=\"off\">\r\n                    <Header as=\"h2\" content=\"Login to Reactivities\" color=\"teal\" textAlign=\"center\" />\r\n                    <MyTextInput name=\"email\" placeholder=\"Email\" />\r\n                    <MyTextInput name=\"password\" placeholder=\"Password\" type=\"password\"/>\r\n                    <ErrorMessage\r\n                        name=\"error\"\r\n                        render={\r\n                                () => <Label style={{marginBottom: 10}} basic color=\"red\" content={errors.error} /> \r\n                            }\r\n                    />\r\n                    <Button loading={isSubmitting} positive content=\"Login\" type=\"submit\" fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React from 'react'\r\nimport { Message } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationErrors({errors}: Props) {\r\n    return (\r\n        <Message error>\r\n            {\r\n                errors && (\r\n                    <Message.List>\r\n                        {errors.map((err: any, i: any) => (\r\n                            <Message.Item key={i}>{err}</Message.Item>\r\n                        ))}\r\n                    </Message.List>\r\n                )\r\n            }\r\n        </Message>\r\n    )\r\n}\r\n","import { ErrorMessage, Form, Formik } from 'formik'\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Button, Header, Label } from 'semantic-ui-react'\r\nimport MyTextInput from '../../app/common/form/MyTextInput'\r\nimport { useStore } from '../../app/stores/store'\r\nimport * as Yup from 'yup'\r\nimport ValidationErrors from '../errors/ValidationErrors';\r\n\r\nexport default observer(function RegisterForm() {\r\n    const {userStore} = useStore();\r\n\r\n    return(\r\n        <Formik\r\n            initialValues={{displayName: '', username: '', email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.register(values)\r\n                .catch(error => setErrors({error}))}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required(),\r\n                username: Yup.string().required(),\r\n                email: Yup.string().required().email(),\r\n                password: Yup.string().required(),\r\n            })}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\r\n                <Form className=\"ui form error\" onSubmit={handleSubmit} autoComplete=\"off\">\r\n                    <Header as=\"h2\" content=\"Sign up to Reactivities\" color=\"teal\" textAlign=\"center\" />\r\n                    <MyTextInput name=\"displayName\" placeholder=\"Name\" />\r\n                    <MyTextInput name=\"username\" placeholder=\"Username\" />\r\n                    <MyTextInput name=\"email\" placeholder=\"Email\" />\r\n                    <MyTextInput name=\"password\" placeholder=\"Password\" type=\"password\"/>\r\n                    <ErrorMessage\r\n                        name=\"error\"\r\n                        render={\r\n                                () => <ValidationErrors errors={errors.error}/> \r\n                            }\r\n                    />\r\n                    <Button disabled={!isValid || !dirty || isSubmitting} \r\n                        loading={isSubmitting} positive content=\"Register\" type=\"submit\" fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Container, Header, Segment, Image, Button } from 'semantic-ui-react'\r\nimport { useStore } from '../../app/stores/store';\r\nimport LoginForm from '../users/LoginForm';\r\nimport RegisterForm from '../users/RegisterForm';\r\n\r\nexport default observer(function HomePage() {\r\n    const { userStore, modalStore } = useStore();\r\n\r\n    return (\r\n        <Segment inverted textAlign=\"center\" vertical className=\"masthead\">\r\n            <Container text>\r\n                <Header as=\"h1\" inverted>\r\n                    <Image size=\"massive\" src=\"/assets/Images/logo.png\" style={{ marginBottm: 12 }} />\r\n                    Reactivities\r\n                </Header>\r\n                {userStore.isLoggedIn ?\r\n                    (\r\n                        <>\r\n                            <Header as=\"h2\" inverted >\r\n                                <Header.Content>Welcome to Reactivities</Header.Content>\r\n                            </Header>\r\n                            <Button as={Link} to=\"/activities\" size=\"huge\" inverted>\r\n                                Go to Activities!\r\n                        </Button>\r\n                        </>\r\n                    )\r\n                    :\r\n                    (\r\n                        <>\r\n                            <Button onClick={() => modalStore.openModal(<LoginForm />)} size=\"huge\" inverted>\r\n                                Login!\r\n                            </Button>\r\n                            <Button onClick={() => modalStore.openModal(<RegisterForm />)} size=\"huge\" inverted>\r\n                                Register!\r\n                            </Button>\r\n                        </>\r\n                    )\r\n                }\r\n\r\n            </Container>\r\n        </Segment>\r\n    )\r\n})","import React from 'react'\r\nimport { Dimmer, Loader } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nexport default function LoadingComponent({inverted = true, content = 'Loading...'} : Props) {\r\n    return (\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content}/>\r\n        </Dimmer>\r\n    )\r\n}","import { useField } from 'formik'\r\nimport React from 'react'\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextArea(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color=\"red\">{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { useField } from 'formik'\r\nimport React from 'react'\r\nimport { Form, Label, Select } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?: string;\r\n}\r\n\r\nexport default function MySelectInput(props: Props) {\r\n    const [field, meta, helpers] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select \r\n                clearable\r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(e, d) => helpers.setValue(d.value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n                placeholder={props.placeholder}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color=\"red\">{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","export const categoryOptions = [\r\n    {text: \"Drinks\", value: \"drinks\"},\r\n    {text: \"Culture\", value: \"culture\"},\r\n    {text: \"Film\", value: \"film\"},\r\n    {text: \"Food\", value: \"food\"},\r\n    {text: \"Music\", value: \"music\"},\r\n    {text: \"Travel\", value: \"travel\"},\r\n]","import { useField } from 'formik'\r\nimport React from 'react'\r\nimport { Form, Label } from 'semantic-ui-react'\r\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker'\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\r\n    const [field, meta, helpers] = useField(props.name!);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker\r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color=\"red\">{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { observer } from 'mobx-react-lite'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Link, useHistory, useParams } from 'react-router-dom'\r\nimport { Button, Header, Segment } from 'semantic-ui-react'\r\nimport LoadingComponent from '../../../app/layouts/LoadingComponent'\r\nimport { useStore } from '../../../app/stores/store'\r\nimport { v4 as uuid } from \"uuid\"\r\nimport { Formik, Form } from 'formik'\r\nimport * as Yup from \"yup\"\r\nimport MyTextInput from '../../../app/common/form/MyTextInput'\r\nimport MyTextArea from '../../../app/common/form/MyTextArea'\r\nimport MySelectInput from '../../../app/common/form/MySelectInput'\r\nimport { categoryOptions } from '../../../app/common/options/categoryOptions'\r\nimport MyDateInput from '../../../app/common/form/MyDateInput'\r\nimport { Activity, ActivtiyFormValues } from '../../../app/models/activity'\r\n\r\nexport default observer(function ActivityForm() {\r\n    const history = useHistory();\r\n    const { activityStore } = useStore();\r\n    const { createActivity, updateActivity, loading, loadActivity, loadingInitial } = activityStore\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    const [activity, setActivity] = useState<ActivtiyFormValues>(new ActivtiyFormValues());\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required(\"The activity title is required\"),\r\n        descripion: Yup.string().required(\"The activity description is required\"),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required(\"Date is Required\").nullable(),\r\n        venue: Yup.string().required(),\r\n        city: Yup.string().required(),\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id).then(activity => setActivity(new ActivtiyFormValues(activity)))\r\n    }, [id, loadActivity]);\r\n\r\n    function handleFormSubmit(activity: ActivtiyFormValues) {\r\n        if(!activity.id) {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            };\r\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`));\r\n        } else {\r\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`));\r\n        }\r\n    }\r\n\r\n\r\n    if (loadingInitial) return <LoadingComponent content=\"Loading Activity...\" />\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content=\"Activity Details\" sub color=\"teal\" />\r\n            <Formik\r\n                validationSchema={validationSchema}\r\n                enableReinitialize\r\n                initialValues={activity}\r\n                onSubmit={values => handleFormSubmit(values)}>\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                    <Form className=\"ui form\" onSubmit={handleSubmit} autoComplete=\"off\">\r\n                        <MyTextInput name=\"title\" placeholder=\"Title\" />\r\n                        <MyTextArea rows={3} placeholder=\"Description\" name=\"descripion\" />\r\n                        <MySelectInput options={categoryOptions} placeholder=\"Category\" name=\"category\" />\r\n                        <MyDateInput \r\n                            placeholderText=\"Date\" \r\n                            name=\"date\" \r\n                            showTimeSelect\r\n                            timeCaption=\"time\"\r\n                            dateFormat=\"MMMM d, yyyy h:mm aa\"\r\n                        />\r\n                        <Header content=\"Location Details\" sub color=\"teal\" />\r\n                        <MyTextInput placeholder=\"City\" name=\"city\" />\r\n                        <MyTextInput placeholder=\"Venue\" name=\"venue\" />\r\n                        <Button \r\n                        disabled={isSubmitting || !dirty || !isValid}\r\n                        loading={isSubmitting} \r\n                        floated=\"right\" \r\n                        positive \r\n                        type=\"submit\" \r\n                        content=\"Submit\" \r\n                        />\r\n                        <Button as={Link} to=\"/activities\" floated=\"right\" type=\"button\" content=\"Cancel\" />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n\r\n        </Segment>\r\n    )\r\n})\r\n","import { Formik, Form, Field, FieldProps } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store'\r\nimport * as Yup from \"yup\"\r\nimport { formatDistanceToNow } from 'date-fns'\r\n\r\ninterface Props {\r\n    activityId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\r\n\r\n    const { commentStore } = useStore();\r\n\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.createHubConnetion(activityId)\r\n        }\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [commentStore, activityId]);\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{ border: 'none' }}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n\r\n                <Formik\r\n                    onSubmit={(values, { resetForm }) =>\r\n                        commentStore.addComment(values).then(() => resetForm())}\r\n                    initialValues={{ body: '' }}\r\n                    validationSchema={\r\n                        Yup.object({\r\n                            body: Yup.string().required()\r\n                        })\r\n                    }\r\n                >\r\n                    {({ isSubmitting, isValid, handleSubmit }) => (\r\n                        <Form className=\"ui form\">\r\n                            <Field name=\"body\">\r\n                                {(props: FieldProps) => (\r\n                                    <div style={{ position: \"relative\" }}>\r\n                                        <Loader active={isSubmitting} />\r\n                                        <textarea\r\n                                            placeholder=\"Enter your comments (Enter to submit, SHIFT + enter for new line)\"\r\n                                            rows={2}\r\n                                            {...props.field}\r\n                                            onKeyPress={e => {\r\n                                                if (e.key === \"Enter\" && e.shiftKey) {\r\n                                                    return;\r\n                                                }\r\n                                                if (e.key === \"Enter\" && !e.shiftKey) {\r\n                                                    e.preventDefault();\r\n                                                    isValid && handleSubmit();\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n\r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment.image || '/assets/Images/user.png'} />\r\n                            <Comment.Content>\r\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>\r\n                                    {comment.displayName}\r\n                                </Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{ whiteSpace: \"pre-wrap\" }}>{comment.body}</Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Item, Segment, Image, Label } from 'semantic-ui-react'\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedHeader({ activity }: Props) {\r\n    const { activityStore: { updateAttendance, loading, cancelActivityToggle } } = useStore();\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{ padding: '0' }}>\r\n                {activity.isCancelled &&\r\n                    <Label style={{ position: \"absolute\", zIndex: 1000, left: -14, top: 20 }} ribbon color=\"red\" content=\"Cancelled\" />\r\n                }\r\n                <Image src={`/assets/Images/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle} />\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{ color: 'white' }}\r\n                                />\r\n                                <p>{format(activity.date!, \"dd MMMM yyyy\")}</p>\r\n                                <p>\r\n                                    Hosted by <strong>Bob</strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <>\r\n                        <Button\r\n                            color={activity.isCancelled ? \"green\" : \"red\"}\r\n                            floated=\"left\"\r\n                            basic\r\n                            content={activity.isCancelled ? \"Re-activate Activity\" : \"Cancel Activity\"}\r\n                            onClick={cancelActivityToggle}\r\n                            loading={loading}\r\n                        />\r\n                        <Button\r\n                            as={Link}\r\n                            disabled={activity.isCancelled}\r\n                            to={`/manage/${activity.id}`}\r\n                            color='orange'\r\n                            floated='right'\r\n                        >\r\n                            Manage Event\r\n                        </Button>\r\n                    </>\r\n                ) : activity.isGoing ? (\r\n                    <Button loading={loading} onClick={updateAttendance}>Cancel attendance</Button>\r\n                ) : (\r\n                            <Button\r\n                                disabled={activity.isCancelled}\r\n                                loading={loading}\r\n                                onClick={updateAttendance}\r\n                                color='teal'\r\n                            >\r\n                                Join Activity\r\n                            </Button>\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Profile } from '../../../app/models/profile'\r\n\r\ninterface Props {\r\n    attendees: Profile[];\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar({ attendees }: Props) {\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? \"Person\" : \"People\"} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee => (\r\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\r\n                            <Label\r\n                                style={{ position: 'absolute' }}\r\n                                color='orange'\r\n                                ribbon='right'\r\n                            >\r\n                                Host\r\n                            </Label>\r\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                {attendee.following &&\r\n                                    <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.descripion}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n              {format(activity.date!, \"dd MMM yyyy h:mm aa\")}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport { clear } from 'node:console';\r\nimport React, { useEffect } from 'react'\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react'\r\nimport LoadingComponent from '../../../app/layouts/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityDetailedChat from './ActivityDetailedChat';\r\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\r\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\r\nimport ActivityDetailedInfo from './ActivtyDetailedInfo';\r\n\r\nexport default observer(function ActivityDetails() {\r\n    const {activityStore} = useStore();\r\n    const {selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity} = activityStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id);\r\n        return () => clearSelectedActivity();\r\n    }, [id, loadActivity, clearSelectedActivity]);\r\n\r\n    if(loadingInitial || !activity) return <LoadingComponent />;\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailedHeader activity={activity}/>\r\n                <ActivityDetailedInfo activity={activity}/>\r\n                <ActivityDetailedChat activityId={activity.id}/>\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityDetailedSidebar attendees={activity.attendees!} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})\r\n","import React, { useState } from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {\r\n                errors &&\r\n                    <ValidationErrors errors={errors} />\r\n            }\r\n        </>\r\n    )\r\n}","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react'\r\n\r\nexport default function NotFound() {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name=\"search\" />\r\n                OOPS - we could not find it :p\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to=\"/activities\" primary>\r\n                    Return to Activities Page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Container, Header, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store'\r\n\r\nexport default observer(function ServerError() {\r\n    const {commonStore} = useStore();\r\n\r\n    return(\r\n        <Container>\r\n            <Header as=\"h1\" content=\"ServerError\" />\r\n            <Header sub as=\"h5\" color=\"red\" content={commonStore.error?.message} />\r\n            {\r\n                commonStore.error?.message &&\r\n                <Segment>\r\n                    <Header as=\"h4\" content=\"Stack trace\" color=\"teal\" />\r\n                    <code style={{ marginTop: '10px'}}>{commonStore.error.details}</code>\r\n                </Segment>\r\n            }\r\n        </Container>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStore } from '../../stores/store'\r\n\r\nexport default observer(function ModalContainer() {\r\n    const {modalStore} = useStore();\r\n\r\n    return(\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size=\"mini\">\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n})","import { Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport MyTextArea from \"../../app/common/form/MyTextArea\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\n\r\ninterface Props {\r\n    setEditMode: (editMode: boolean) => void;\r\n}\r\n\r\nexport default observer(function ProfileEditForm({setEditMode}: Props) {\r\n    const {profileStore: {profile, updateProfile}} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{displayName: profile?.displayName, bio: profile?.bio}}\r\n            onSubmit={values => {\r\n                updateProfile(values).then(() => {\r\n                    setEditMode(false);\r\n                })\r\n            }}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required()\r\n            })}\r\n        >\r\n            {({isSubmitting, isValid, dirty}) => (\r\n                <Form className='ui form'>\r\n                    <MyTextInput placeholder='Display Name' name='displayName' />\r\n                    <MyTextArea rows={3} placeholder='Add your bio' name='bio' />\r\n                    <Button \r\n                        positive\r\n                        type='submit'\r\n                        loading={isSubmitting}\r\n                        content='Update profile'\r\n                        floated='right'\r\n                        disabled={!isValid || !dirty}\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React, {useState} from 'react';\r\nimport {useStore} from \"../../app/stores/store\";\r\nimport {Button, Grid, Header, Tab} from \"semantic-ui-react\";\r\nimport ProfileEditForm from \"./ProfileEditForm\";\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nexport default observer(function ProfileAbout() {\r\n    const {profileStore} = useStore();\r\n    const {isCurrentUser, profile} = profileStore;\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width='16'>\r\n                    <Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            floated='right'\r\n                            basic\r\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\r\n                            onClick={() => setEditMode(!editMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width='16'>\r\n                    {editMode ? <ProfileEditForm setEditMode={setEditMode} /> : <span style={{whiteSpace: 'pre-wrap'}}>{profile?.bio}</span>}\r\n\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { format } from 'date-fns'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React, { SyntheticEvent, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Card, Grid, Header, Tab, TabProps, Image } from 'semantic-ui-react'\r\nimport { UserActivity } from '../../app/models/profile'\r\nimport { useStore } from '../../app/stores/store'\r\n\r\nconst panes = [\r\n    { menuItem: 'Future Events', pane: { key: 'future' } },\r\n    { menuItem: 'Past Events', pane: { key: 'past' } },\r\n    { menuItem: 'Hosting', pane: { key: 'hosting' } },\r\n]\r\n\r\nexport default observer(function ProfileActivities() {\r\n    const { profileStore } = useStore();\r\n    const { loadUserActivities, profile, loadingActivities, userActivities } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadUserActivities(profile!.username);\r\n    }, [loadUserActivities, profile])\r\n\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key);\r\n    };\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16} >\r\n                    <Header floated=\"left\" icon=\"calendar\" content={\"Activities\"} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16} >\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4} >\r\n                        {userActivities.map((activity: UserActivity) => (\r\n                            <Card\r\n                                as={Link}\r\n                                to={`/activities/${activity.id}`}\r\n                                key={activity.id}\r\n                            >\r\n                                <Image\r\n                                    src={`/assets/Images/categoryImages/${activity.category}.jpg`}\r\n                                    style={{ minHeight: 100, objecFit: 'cover' }}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header textAlign=\"center\">{activity.title}</Card.Header>\r\n                                    <Card.Meta textAlign=\"center\" >\r\n                                        <div>{format(new Date(activity.date), 'do LLL')}</div>\r\n                                        <div>{format(new Date(activity.date), 'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n})","import { observer } from 'mobx-react-lite'\r\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store'\r\nimport ProfileCard from './ProfileCard';\r\n\r\nexport default observer(function ProfileFollowings() {\r\n    const {profileStore} = useStore();\r\n\r\n    const{profile, followings, loadingFollowings, activeTab} = profileStore;\r\n\r\n    return(\r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated=\"left\" icon=\"user\" \r\n                    content={\r\n                        activeTab === 3 ?\r\n                        `People following ${profile?.displayName}`\r\n                        : `People ${profile?.displayName} is following`\r\n                    } />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {\r\n                            followings.map(profile => (\r\n                                <ProfileCard key={profile.username} profile={profile} />\r\n                            ))\r\n                        }\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React from 'react';\r\nimport {Cropper} from 'react-cropper';\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Props {\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props) {\r\n    return(\r\n        <Cropper\r\n            src={imagePreview}\r\n            style={{height: 200, width: '100%'}}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    )\r\n}","import React, { useCallback } from 'react'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    setFiles: (files: any) => void;\r\n}\r\n\r\nexport default function PhotoWidgetDropZone({ setFiles }: Props) {\r\n    const dzStyles = {\r\n        border: 'dazed 3px #eee',\r\n        borderColor: \"#eee\",\r\n        borderRadius: \"5px\",\r\n        paddingTop: \"30px\",\r\n        textAlign: \"center\" as \"center\",\r\n        height: 200\r\n    }\r\n\r\n    const dzActive = {\r\n        borderColor: \"green\"\r\n    }\r\n\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n            preview: URL.createObjectURL(file)\r\n        })))\r\n    }, [setFiles])\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\r\n\r\n    return (\r\n        <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles} >\r\n            <input {...getInputProps()} />\r\n            <Icon name=\"upload\" size=\"huge\" />\r\n            <Header content=\"Drop Image\" />\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { Button, Grid, Header } from 'semantic-ui-react'\r\nimport PhotoWidgetCropper from './PhotoWIdgetCropper';\r\nimport PhotoWidgetDropZone from './PhotoWidgetDropzone';\r\n\r\ninterface Props {\r\n    loading: boolean;\r\n    uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\nexport default function PhotoUploadWidget({loading, uploadPhoto}: Props) {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\r\n        }\r\n    }, [files])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header color=\"teal\" content=\"Step 1 - Add Photo\" />\r\n                <PhotoWidgetDropZone setFiles={setFiles} />\r\n            </Grid.Column>\r\n\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header color=\"teal\" content=\"Step 2 - Resize image\" />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper\r\n                        setCropper={setCropper}\r\n                        imagePreview={files[0].preview}\r\n                    />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header color=\"teal\" content=\"Step 3 - Preview & Upload\" />\r\n                {files && files.length > 0 &&\r\n                <>\r\n                    <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\r\n                    <Button.Group widths={2}>\r\n                        <Button loading={loading} onClick={onCrop} positive icon=\"check\" />\r\n                        <Button disabled={loading} onClick={() => setFiles([])} icon=\"close\" />\r\n                    </Button.Group>\r\n                </>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import { observer } from 'mobx-react-lite'\r\nimport React, { SyntheticEvent, useState } from 'react'\r\nimport { Card, Header, Tab, Image, Grid, Button } from 'semantic-ui-react'\r\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget'\r\nimport { Photo, Profile } from '../../app/models/profile'\r\nimport { useStore } from '../../app/stores/store'\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nexport default observer(function ProfilePhotos({ profile }: Props) {\r\n    const { profileStore: { isCurrentUser, uploadPhoto, uploading, loading, setMainPhoto, deletePhoto } } = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState(\"\");\r\n\r\n    function handlePhotoUpload(file: Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated=\"left\" icon=\"image\" content=\"Photos\" />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            floated=\"right\" basic\r\n                            content={addPhotoMode ? \"Cancel\" : \"Add Photo\"}\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\r\n                    ) : (\r\n                            <Card.Group itemsPerRow={5}>\r\n                                {profile.photos?.map(photo => (\r\n                                    <Card key={photo.id}>\r\n                                        <Image src={photo.url} />\r\n                                        {isCurrentUser && (\r\n                                            <Button.Group fluid widths={2}>\r\n                                                <Button\r\n                                                    basic\r\n                                                    color=\"green\"\r\n                                                    content=\"Main\"\r\n                                                    name={'main' + photo.id}\r\n                                                    disabled={photo.isMain}\r\n                                                    loading={target === 'main' + photo.id && loading}\r\n                                                    onClick={e => handleSetMainPhoto(photo, e)}\r\n                                                />\r\n                                                <Button \r\n                                                    basic \r\n                                                    color=\"red\" \r\n                                                    icon=\"trash\"\r\n                                                    loading={target === photo.id && loading}\r\n                                                    onClick={e => handleDeletePhoto(photo, e)}\r\n                                                    disabled={photo.isMain}\r\n                                                    name={photo.id}\r\n                                                />\r\n                                            </Button.Group>\r\n                                        )}\r\n                                    </Card>\r\n                                ))}\r\n                            </Card.Group>\r\n                        )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Tab } from 'semantic-ui-react'\r\nimport { Profile } from '../../app/models/profile';\r\nimport ProfileStore from '../../app/stores/profileStore';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileAbout from './ProfileAbout';\r\nimport ProfileActivities from './ProfileActivities';\r\nimport ProfileFollowings from './ProfileFollowings';\r\nimport ProfilePhotos from './ProfilePhotos';\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nexport default observer(function ProfileContent({profile}: Props) {\r\n    const {profileStore} = useStore();\r\n    \r\n    const panes = [\r\n        {menuItem: 'About', render: () => <ProfileAbout />},\r\n        {menuItem: \"Photos\", render: () => <ProfilePhotos profile={profile} />},\r\n        {menuItem: \"Events\", render: () => <ProfileActivities />},\r\n        {menuItem: \"Followers\", render: () => <ProfileFollowings />},\r\n        {menuItem: \"Following\", render: () => <ProfileFollowings />},\r\n    ];\r\n\r\n    return (\r\n        <Tab \r\n            menu={{fluid: true, vertical:true}}\r\n            menuPosition=\"right\"\r\n            panes={panes}\r\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    )\r\n})","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Button, Divider, Grid, Header, Item, ItemMeta, Reveal, Segment, Statistic } from 'semantic-ui-react'\r\nimport { Profile } from '../../app/models/profile'\r\nimport FollowButton from './FollowButton'\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileHeader({ profile }: Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size=\"small\" src={profile.image || \"/assets/Images/user.png\"} />\r\n                            <Item.Content verticalAlign=\"middle\">\r\n                                <Header as=\"h1\" content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group width={2}>\r\n                        <Statistic label=\"Followers\" value={profile.followersCount} />\r\n                        <Statistic label=\"Following\" value={profile.followingCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { useEffect } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { Grid } from 'semantic-ui-react'\r\nimport LoadingComponent from '../../app/layouts/LoadingComponent'\r\nimport { useStore } from '../../app/stores/store'\r\nimport ProfileContent from './ProfileContent'\r\nimport ProfileHeader from './ProfileHeader'\r\nexport default observer(function ProfilePage() {\r\n    const { username } = useParams<{ username: string }>();\r\n    const { profileStore } = useStore();\r\n    const { loadingProfile,loadProfile, profile, setActiveTab } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n        return () => {\r\n            setActiveTab(0);\r\n        }\r\n    }, [loadProfile, username, setActiveTab])\r\n\r\n    if(loadingProfile) return <LoadingComponent content=\"Loading profile...\" />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile &&\r\n                    <>\r\n                        <ProfileHeader profile={profile} />\r\n                        <ProfileContent profile={profile} />\r\n                    </>}\r\n\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React from 'react'\r\nimport { Redirect, Route, RouteComponentProps, RouteProps } from 'react-router';\r\nimport { useStore } from '../stores/store'\r\n\r\ninterface Props extends RouteProps {\r\n     component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({component: Component, ...rest} : Props) {\r\n    const {userStore: {isLoggedIn}} = useStore();\r\n    \r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to=\"/\" />}\r\n        />\r\n    );\r\n}","import { useEffect } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router-dom';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityForm from '../../features/activities/forms/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport TestErrors from '../../features/errors/TestError';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\n\nfunction App() {\n  const location = useLocation();\n  const {commonStore, userStore} = useStore();\n\n  useEffect(() => {\n    if(commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setAppLoaded());  \n    } else {\n      commonStore.setAppLoaded();\n    }\n  }, [commonStore, userStore])\n\n  if(!commonStore.appLoaded) return <LoadingComponent content=\"Loading App...\" />\n\n  return (\n    <>\n      <ToastContainer position=\"bottom-right\" hideProgressBar />\n      <ModalContainer />\n      <Route exact path=\"/\" component={HomePage} />\n      <Route\n        path={\"/(.+)\"}\n        render={() => (\n          <>\n            <NavBar />\n            <Container style={{ marginTop: '7em' }}>\n              <Switch>\n                <PrivateRoute exact path=\"/activities\" component={ActivityDashboard} />\n                <PrivateRoute path=\"/activities/:id\" component={ActivityDetails} />\n                <PrivateRoute key={location.key} path={[\"/createActivity\", \"/manage/:id\"]} component={ActivityForm} />\n                <PrivateRoute path=\"/profiles/:username\" component={ProfilePage} />\n                <PrivateRoute path=\"/errors\" component={TestErrors} />\n                <Route path=\"/server-error\" component={ServerError} />\n                <Route component={NotFound} />\n              </Switch>\n            </Container>\n          </>\n        )}\n      />\n    </>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css'\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './app/layouts/styles.css';\nimport App from './app/layouts/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport {createBrowserHistory} from 'history';\nimport ScrollToTop from './app/layouts/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <ScrollToTop />\n      <App />\n    </Router>\n  </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}